from __future__ import annotations
import os
from dotenv import load_dotenv # type: ignore
import google.generativeai as genai  # type: ignore

# ==============================
# üîß 1) Load bi·∫øn m√¥i tr∆∞·ªùng
# ==============================
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")

if not API_KEY:
    raise RuntimeError("‚ùå GEMINI_API_KEY is missing in .env")

# ==============================
# ü§ñ 2) C·∫•u h√¨nh Gemini API
# ==============================
genai.configure(api_key=API_KEY)

# ‚úÖ D√πng model ·ªïn ƒë·ªãnh ƒë√£ test OK
MODEL_NAME = "models/gemini-2.5-flash-preview-05-20"

try:
    MODEL = genai.GenerativeModel(MODEL_NAME)
    print(f"[Gemini] ‚úÖ Model loaded successfully: {MODEL_NAME}")
except Exception as e:
    print(f"[Gemini] ‚ö†Ô∏è Failed to load model {MODEL_NAME}: {e}")
    MODEL = None


# ==============================
# üí¨ 3) H√†m sinh ph·∫£n h·ªìi t·ª± ƒë·ªông
# ==============================
def generate_auto_reply(description: str, label: str, priority: str) -> str:
    """
    Sinh ph·∫£n h·ªìi ng·∫Øn g·ªçn, l·ªãch s·ª± cho ph·∫£n √°nh k√Ω t√∫c x√°.
    - description: n·ªôi dung m√¥ t·∫£ s·ª± c·ªë
    - label: lo·∫°i s·ª± c·ªë (ƒëi·ªán / n∆∞·ªõc / internet / ...)
    - priority: m·ª©c ƒë·ªô ∆∞u ti√™n (normal / high / urgent)
    """
    prompt = f"""
    B·∫°n l√† nh√¢n vi√™n qu·∫£n l√Ω k√Ω t√∫c x√° ƒê·∫°i Nam.
    Vi·∫øt ph·∫£n h·ªìi ng·∫Øn g·ªçn (1‚Äì2 c√¢u) cho ph·∫£n √°nh d∆∞·ªõi ƒë√¢y:

    N·ªôi dung: {description}
    Lo·∫°i s·ª± c·ªë: {label}
    M·ª©c ƒë·ªô ∆∞u ti√™n: {priority}

    Y√™u c·∫ßu:
    - Gi·ªçng ƒëi·ªáu th√¢n thi·ªán, l·ªãch s·ª±, c√≥ tr√°ch nhi·ªám.
    - Kh√¥ng d√πng emoji ho·∫∑c k√Ω t√™n.
    """

    if MODEL is None:
        return "H·ªá th·ªëng ƒë√£ ghi nh·∫≠n s·ª± c·ªë, b·ªô ph·∫≠n k·ªπ thu·∫≠t s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t."

    try:
        resp = MODEL.generate_content(prompt)
        if not resp or not getattr(resp, "text", "").strip():
            raise ValueError("Empty response")
        return resp.text.strip()
    except Exception as e:
        print("[Gemini Reply Error]", e)
        return "H·ªá th·ªëng ƒë√£ ghi nh·∫≠n s·ª± c·ªë, b·ªô ph·∫≠n k·ªπ thu·∫≠t s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t."


# ==============================
# üß™ 4) Test nhanh
# ==============================
if __name__ == "__main__":
    print(f"GEMINI_API_KEY: {'OK' if API_KEY else 'MISSING'}")
    print(f"Model in use: {MODEL_NAME}")
    print("---- Test output ----")
    reply = generate_auto_reply(
        "Ph√≤ng 302 b·ªã r√≤ r·ªâ n∆∞·ªõc m·∫°nh ·ªü v√≤i lavabo", "n∆∞·ªõc", "urgent"
    )
    print("Ph·∫£n h·ªìi Gemini:", reply)
