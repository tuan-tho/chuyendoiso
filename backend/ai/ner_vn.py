# backend/ai/ner_vn.py
from __future__ import annotations

import re
from typing import Dict, Optional

# ======= S·ªë ƒë·∫øm ti·∫øng Vi·ªát c∆° b·∫£n -> s·ªë =======
VI_NUM = {
    "m·ªôt": 1, "hai": 2, "ba": 3, "b·ªën": 4, "nƒÉm": 5,
    "s√°u": 6, "b·∫£y": 7, "t√°m": 8, "ch√≠n": 9, "m∆∞·ªùi": 10
}

def _word_to_num(w: str) -> Optional[int]:
    w = w.lower().strip()
    return VI_NUM.get(w)

# ======= Helpers =======
def _clean_room_token(s: str) -> str:
    """Lo·∫°i b·ªè kho·∫£ng tr·∫Øng / '-' trong chu·ªói ph√≤ng, chu·∫©n ho√° ch·ªØ hoa."""
    return s.replace(" ", "").replace("-", "").upper()

def _floor_from_digits(digits: str) -> Optional[str]:
    """
    Suy t·∫ßng t·ª´ CHU·ªñI S·ªê ph√≤ng:
      - 402  -> 4
      - 1205 -> 12
      - 333  -> 3
      - 1001 -> 10
    Ch·ªâ nh·∫≠n 1..15.
    """
    if not digits:
        return None
    try:
        if len(digits) >= 4:
            f = int(digits[:2])
        else:
            f = int(digits[0])
        return str(f) if 1 <= f <= 15 else None
    except ValueError:
        return None

def _infer_floor_from_room(room: str) -> Optional[str]:
    """
    Suy t·∫ßng an to√†n t·ª´ chu·ªói ph√≤ng c√≥ th·ªÉ k√®m to√† v√† d·∫•u '-':
      - 'B3-402'  -> l·∫•y '402' r·ªìi suy -> 4
      - 'P.1205'  -> 12
      - '203'     -> 2
      - 'KSSV214' -> 2
    """
    s = str(room).strip()
    # ∆Øu ti√™n ph·∫ßn sau d·∫•u '-'
    if "-" in s:
        tail = s.split("-")[-1]
        digits = "".join(ch for ch in tail if ch.isdigit())
    else:
        # L·∫•y 3‚Äì4 ch·ªØ s·ªë cu·ªëi n·∫øu c√≥
        m = re.search(r'(\d{3,4})$', s)
        if m:
            digits = m.group(1)
        else:
            # Fallback: l·∫•y to√†n b·ªô s·ªë t√¨m th·∫•y
            digits = "".join(ch for ch in s if ch.isdigit())
    return _floor_from_digits(digits)

# ======= Main extractor =======
def extract_info(text: str) -> Dict[str, Optional[str]]:
    """
    Tr√≠ch xu·∫•t:
      - toanha: B3, C2, ...
      - phong : 203, 402, 1205, ...
      - tang  : 2, 4, 12 (n·∫øu kh√¥ng c√≥ 't·∫ßng X' th√¨ suy t·ª´ 'phong')
      - thoigian: 't·ª´ s√°ng', 't·ªëi qua', 'ng√†y 10/10', ...
    """
    info: Dict[str, Optional[str]] = {"toanha": None, "phong": None, "tang": None, "thoigian": None}
    txt = text.strip()

    # --------- PH√íNG (∆∞u ti√™n to√† + ph√≤ng: B3-402 / b3 402 / B3.402) ----------
    m_build = re.search(r'\b([A-Za-z]\d)[\-\s\.]?(\d{3,4})\b', txt, flags=re.IGNORECASE)
    if m_build:
        info["toanha"] = m_build.group(1).upper()      # B3
        room_digits = m_build.group(2)                  # 402 / 1001
        info["phong"] = room_digits
    else:
        # C√°c bi·∫øn th·ªÉ th∆∞·ªùng g·∫∑p
        room_patterns = [
            r"(?:ph√≤ng|phong|p\.?)\s*(?:kh√°ch\s*s·∫°n\s*sinh\s*vi√™n|kssv)?\s*[-:\s]?([A-Za-z]?\d{2,4}[A-Za-z]?)",
            r"\bKSSV\s*[-:\s]?(\d{2,4})\b",
            r"\bP\s*\.?\s*([A-Za-z]?\d{2,4}[A-Za-z]?)\b",
        ]
        for pat in room_patterns:
            m = re.search(pat, txt, flags=re.IGNORECASE)
            if m:
                info["phong"] = _clean_room_token(m.group(1))
                break

    # --------- T·∫¶NG ----------
    # ∆Øu ti√™n 't·∫ßng X', n·∫øu kh√¥ng th√¨ suy t·ª´ 'phong'
    m_tang = re.search(r"t·∫ßng\s*(\d{1,2})\b", txt, flags=re.IGNORECASE)
    if m_tang:
        info["tang"] = m_tang.group(1)
    elif info["phong"]:
        info["tang"] = _infer_floor_from_room(info["phong"])

    # --------- TH·ªúI GIAN ----------
    fixed_time_patterns = [
        r"(t·ª´\s*t·ªëi\s*qua)", r"(t·ªëi\s*qua)", r"(ƒë√™m\s*qua)", r"(chi·ªÅu\s*h√¥m\s*qua)", r"(h√¥m\s*qua)",
        r"(h√¥m\s*kia)", r"(s√°ng\s*nay)", r"(tr∆∞a\s*nay)", r"(chi·ªÅu\s*nay)", r"(t·ªëi\s*nay)", r"(h√¥m\s*nay)",
        r"(t·ª´\s*s√°ng)",  # th√™m 't·ª´ s√°ng'
    ]
    for ptn in fixed_time_patterns:
        m = re.search(ptn, txt, flags=re.IGNORECASE)
        if m:
            info["thoigian"] = m.group(1).lower().strip()
            return info

    m_date = re.search(r"(ng√†y\s*\d{1,2}/\d{1,2}(?:/\d{2,4})?)", txt, flags=re.IGNORECASE)
    if m_date:
        info["thoigian"] = m_date.group(1).lower().strip()
        return info

    m_cachd = re.search(r"c√°ch\s*ƒë√¢y\s*(\d{1,2})\s*(ng√†y|h√¥m)\b", txt, flags=re.IGNORECASE)
    if m_cachd:
        num = int(m_cachd.group(1))
        info["thoigian"] = f"{num} ng√†y tr∆∞·ªõc"
        return info

    m_num_truoc = re.search(r"\b(\d{1,2})\s*(ng√†y|h√¥m)\s*tr∆∞·ªõc\b", txt, flags=re.IGNORECASE)
    if m_num_truoc:
        num = int(m_num_truoc.group(1))
        info["thoigian"] = f"{num} ng√†y tr∆∞·ªõc"
        return info

    m_num_nay = re.search(r"\b(\d{1,2})\s*(ng√†y|h√¥m)\s*nay\b", txt, flags=re.IGNORECASE)
    if m_num_nay:
        num = int(m_num_nay.group(1))
        info["thoigian"] = f"{num} ng√†y g·∫ßn ƒë√¢y"
        return info

    m_num_plain = re.search(r"\b(\d{1,2})\s*(ng√†y|h√¥m)\b", txt, flags=re.IGNORECASE)
    if m_num_plain:
        num = int(m_num_plain.group(1))
        info["thoigian"] = f"{num} ng√†y g·∫ßn ƒë√¢y"
        return info

    m_word_truoc = re.search(r"\b(m·ªôt|hai|ba|b·ªën|nƒÉm|s√°u|b·∫£y|t√°m|ch√≠n|m∆∞·ªùi)\s*(ng√†y|h√¥m)\s*tr∆∞·ªõc\b", txt, flags=re.IGNORECASE)
    if m_word_truoc:
        num = _word_to_num(m_word_truoc.group(1))
        if num:
            info["thoigian"] = f"{num} ng√†y tr∆∞·ªõc"
            return info

    m_word_nay = re.search(r"\b(m·ªôt|hai|ba|b·ªën|nƒÉm|s√°u|b·∫£y|t√°m|ch√≠n|m∆∞·ªùi)\s*(ng√†y|h√¥m)\s*nay\b", txt, flags=re.IGNORECASE)
    if m_word_nay:
        num = _word_to_num(m_word_nay.group(1))
        if num:
            info["thoigian"] = f"{num} ng√†y g·∫ßn ƒë√¢y"
            return info

    m_word_plain = re.search(r"\b(m·ªôt|hai|ba|b·ªën|nƒÉm|s√°u|b·∫£y|t√°m|ch√≠n|m∆∞·ªùi)\s*(ng√†y|h√¥m)\b", txt, flags=re.IGNORECASE)
    if m_word_plain:
        num = _word_to_num(m_word_plain.group(1))
        if num:
            info["thoigian"] = f"{num} ng√†y g·∫ßn ƒë√¢y"
            return info

    if re.search(r"\b(m·∫•y|v√†i)\s*h√¥m\s*nay\b", txt, flags=re.IGNORECASE):
        info["thoigian"] = "g·∫ßn ƒë√¢y"
        return info

    return info

# ============ Test nhanh ============
if __name__ == "__main__":
    tests = [
        "ph√≤ng 203 ƒë√®n b·ªã h·ªèng t·ª´ h√¥m qua",
        "phong B203 m·∫•t ƒëi·ªán 2 ng√†y r·ªìi",
        "ph√≤ng KSSV-214 t·ªëi kh√¥ng s√°ng",
        "P.305 b·ªã m·∫•t n∆∞·ªõc 1 ng√†y tr∆∞·ªõc",
        "B3-402 m·∫•t n∆∞·ªõc t·ª´ s√°ng",
        "P 12A2 b√≥ng ƒë√®n ch√°y t·ªëi qua",
        "ph√≤ng 1205 h∆∞ internet t·ª´ s√°ng nay",
        "ph√≤ng t·∫ßng 5 b·ªã h∆∞ wifi",
        "C√°ch ƒë√¢y 3 ng√†y ph√≤ng 203 m·∫•t ƒëi·ªán",
        "v√†i h√¥m nay ph√≤ng 203 ch·∫≠p ch·ªùn",
        "2 ng√†y nay wifi y·∫øu ph√≤ng 203",
    ]
    for t in tests:
        print(f"\nüü© {t}")
        print(extract_info(t))
